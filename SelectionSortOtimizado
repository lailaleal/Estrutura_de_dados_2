#import random  # Importa o módulo random para gerar números aleatórios
import time    # Importa o módulo time para medir o tempo de execução

#def gera_array(n):  # Função para gerar um array aleatório
    # Retorna uma lista com n elementos aleatórios entre 0 e 1000
    #return [random.randint(0, 1000) for _ in range(n)]

def selection_sort_otimizado(array):  # Função do Selection Sort otimizado
    n = len(array)  # Obtém o tamanho do array
    print("\n=== SELECTION SORT OTIMIZADO ===")
    # Mostra apenas os 10 primeiros elementos para não poluir a saída com arrays grandes
    print("Array original:", array)  
    
    # Loop principal: vai da primeira até a penúltima posição (otimização 1)
    for i in range(n // 2):  # Percorre apenas a metade do array
        menor = i  # Assume que o menor elemento está na posição atual
        maior = n - 1 - i  # Assume que o maior está no final do segmento não ordenado
        
        # Busca simultânea pelo menor e maior
        for j in range(i + 1, n - i):
            if array[j] < array[menor]:
                menor = j
            elif array[j] > array[maior]:
                maior = j
        
        # Coloca o menor no início
        array[i], array[menor] = array[menor], array[i]
        
        # Caso especial se o maior estava na posição do menor
        if maior == i:
            maior = menor
        
        # Coloca o maior no final
        array[n - 1 - i], array[maior] = array[maior], array[n - 1 - i]
        
        print(f"Iteração {i + 1}: {array}")  # Mostra progresso
    
    print("\nArray ordenado:", array)  # Resultado final
    return array

def main():
   
    print("=== SELECTION SORT OTIMIZADO ===")
    
    # Entrada do número de elementos
    while True:
        try:
            n = int(input("\nDigite o número de elementos: "))
            if n <= 0:
                print("Por favor, digite um número positivo!")
                continue
            break
        except ValueError:
            print("Entrada inválida! Digite um número inteiro.")
    
    # Entrada dos elementos
    print(f"\nDigite os {n} elementos (separados por espaço):")
    while True:
        elementos = input().split()
        if len(elementos) != n:
            print(f"Erro: Você deve digitar exatamente {n} elementos!")
            print("Por favor, digite novamente:")
            continue
        
        try:
            array = [int(num) for num in elementos]
            break
        except ValueError:
            print("Entrada inválida! Digite apenas números inteiros.")
    
    # Processamento
    print("\n=== PROCESSO DE ORDENAÇÃO ===")
    inicio = time.time()
    array_ordenado = selection_sort_otimizado(array.copy())
    tempo = time.time() - inicio
    
    # Resultados
    print("\n=== RESULTADOS ===")
    print("Array original:", array)
    print("Array ordenado:", array_ordenado)
    print(f"Tempo de execução: {tempo:.6f} segundos")

if __name__ == "__main__":
    main()